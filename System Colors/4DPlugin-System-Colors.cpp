/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-System-Colors.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : System Colors
 #	author : miyako
 #	2021/04/04
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-System-Colors.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- System Colors
            
			case 1 :
				Get_system_colors(params);
				break;

        }

	}
	catch(...)
	{

	}
}

typedef enum {
    
    colorspace_deviceRGBColorSpace_t = 0,
    colorspace_displayP3ColorSpace_t = 1,
    colorspace_sRGBColorSpace_t = 2,
    colorspace_genericRGBColorSpace_t = 3,
    colorspace_extendedSRGBColorSpace_t = 4
    
}colorspace_t;

static unsigned int getColorRGB(NSColor *color,
                                blend_type_t blend = blend_type_none, double fraction = 0.0f) {
    
    unsigned int rgb = 0;
        
    if(color)
    {
        NSColor *device_color = nil;
        CGFloat red, green, blue, alpha;
        
        switch (blend) {
            case blend_type_none:

                break;
            case blend_type_windowBackgroundColor:
                color = [color blendedColorWithFraction:fraction ofColor:[NSColor windowBackgroundColor]];
                break;
            case blend_type_whiteColor:
                color = [color blendedColorWithFraction:fraction ofColor:[NSColor whiteColor]];
                break;
            case blend_type_blackColor:
                color = [color blendedColorWithFraction:fraction ofColor:[NSColor blackColor]];
                break;
            default:
            {
                unsigned int blend_rgb = (unsigned int)blend;
                CGFloat r = (blend_rgb & 0x00FF0000) >> 16;
                CGFloat g = (blend_rgb & 0x0000FF00) >> 8;
                CGFloat b = (blend_rgb & 0x000000FF);
                CGFloat a = 1.0f;
                NSColor *otherColor = [NSColor colorWithRed:r/0xFF green:g/0xFF blue:b/0xFF alpha:a];
                color = [color blendedColorWithFraction:fraction ofColor:otherColor];
            }
                break;
        }
 
        if(color)
        {
            device_color = [color colorUsingColorSpace:[NSColorSpace deviceRGBColorSpace]];
            
            if(device_color) {
                [device_color getRed:&red green:&green blue:&blue alpha:&alpha];
                rgb +=
                +((unsigned int)floor((CGFloat)(red      * 0xFF) + 0.5f) << 16)
                +((unsigned int)floor((CGFloat)(green    * 0xFF) + 0.5f) << 8)
                + (unsigned int)floor((CGFloat)(blue     * 0xFF) + 0.5f);
            }
        }
    }
    
    return rgb;
}

#pragma mark -

void Get_system_colors(PA_PluginParameters params) {

    PA_ObjectRef returnValue = PA_CreateObject();
    
    blend_type_t blend = (blend_type_t)PA_GetLongParameter(params, 1);
    
    double fraction = PA_GetDoubleParameter(params, 2);
    
    if(fraction<0){
        fraction = 0.0f;
    }
    
    if(fraction>1){
        fraction = 1.0f;
    }
    
    ob_set_n(returnValue,
             L"controlShadowColor", getColorRGB([NSColor controlShadowColor], blend, fraction));
    ob_set_n(returnValue,
             L"controlDarkShadowColor", getColorRGB([NSColor controlDarkShadowColor], blend, fraction));
    ob_set_n(returnValue,
             L"controlColor", getColorRGB([NSColor controlColor], blend, fraction));
    ob_set_n(returnValue,
             L"controlHighlightColor", getColorRGB([NSColor controlHighlightColor], blend, fraction));
    ob_set_n(returnValue,
             L"controlLightHighlightColor", getColorRGB([NSColor controlLightHighlightColor], blend, fraction));
    ob_set_n(returnValue,
             L"controlTextColor", getColorRGB([NSColor controlTextColor], blend, fraction));
    ob_set_n(returnValue,
             L"controlBackgroundColor", getColorRGB([NSColor controlBackgroundColor], blend, fraction));
    if (@available(macOS 10.14, *)) {
        ob_set_n(returnValue,
                 L"controlAccentColor", getColorRGB([NSColor controlAccentColor], blend, fraction));
    }
    ob_set_n(returnValue,
             L"selectedControlColor", getColorRGB([NSColor selectedControlColor], blend, fraction));
    ob_set_n(returnValue,
             L"secondarySelectedControlColor", getColorRGB([NSColor secondarySelectedControlColor], blend, fraction));
    ob_set_n(returnValue,
             L"selectedControlTextColor", getColorRGB([NSColor selectedControlTextColor], blend, fraction));
    ob_set_n(returnValue,
             L"disabledControlTextColor", getColorRGB([NSColor disabledControlTextColor], blend, fraction));
    ob_set_n(returnValue,
             L"textColor", getColorRGB([NSColor textColor], blend, fraction));
    ob_set_n(returnValue,
             L"textBackgroundColor", getColorRGB([NSColor textBackgroundColor], blend, fraction));
    ob_set_n(returnValue,
             L"selectedTextColor", getColorRGB([NSColor selectedTextColor], blend, fraction));
    ob_set_n(returnValue,
             L"selectedTextBackgroundColor", getColorRGB([NSColor selectedTextBackgroundColor], blend, fraction));
    ob_set_n(returnValue,
             L"gridColor", getColorRGB([NSColor gridColor], blend, fraction));
    ob_set_n(returnValue,
             L"keyboardFocusIndicatorColor", getColorRGB([NSColor keyboardFocusIndicatorColor], blend, fraction));
    ob_set_n(returnValue,
             L"windowBackgroundColor", getColorRGB([NSColor windowBackgroundColor], blend, fraction));
    ob_set_n(returnValue,
             L"underPageBackgroundColor", getColorRGB([NSColor underPageBackgroundColor], blend, fraction));
    ob_set_n(returnValue,
             L"labelColor", getColorRGB([NSColor labelColor], blend, fraction));
    ob_set_n(returnValue,
             L"secondaryLabelColor", getColorRGB([NSColor secondaryLabelColor], blend, fraction));
    ob_set_n(returnValue,
             L"tertiaryLabelColor", getColorRGB([NSColor tertiaryLabelColor], blend, fraction));
    ob_set_n(returnValue,
             L"quaternaryLabelColor", getColorRGB([NSColor quaternaryLabelColor], blend, fraction));
    ob_set_n(returnValue,
             L"scrollBarColor", getColorRGB([NSColor scrollBarColor], blend, fraction));
    ob_set_n(returnValue,
             L"knobColor", getColorRGB([NSColor knobColor], blend, fraction));
    ob_set_n(returnValue,
             L"selectedKnobColor", getColorRGB([NSColor selectedKnobColor], blend, fraction));
    ob_set_n(returnValue,
             L"windowFrameColor", getColorRGB([NSColor windowFrameColor], blend, fraction));
    ob_set_n(returnValue,
             L"windowFrameTextColor", getColorRGB([NSColor windowFrameTextColor], blend, fraction));
    ob_set_n(returnValue,
             L"selectedMenuItemColor", getColorRGB([NSColor selectedMenuItemColor], blend, fraction));
    ob_set_n(returnValue,
             L"selectedMenuItemTextColor", getColorRGB([NSColor selectedMenuItemTextColor], blend, fraction));
    ob_set_n(returnValue,
             L"highlightColor", getColorRGB([NSColor highlightColor], blend, fraction));
    ob_set_n(returnValue,
             L"shadowColor", getColorRGB([NSColor shadowColor], blend, fraction));
    ob_set_n(returnValue,
             L"headerColor", getColorRGB([NSColor headerColor], blend, fraction));
    ob_set_n(returnValue,
             L"headerTextColor", getColorRGB([NSColor headerTextColor], blend, fraction));
    ob_set_n(returnValue,
             L"alternateSelectedControlColor", getColorRGB([NSColor alternateSelectedControlColor], blend, fraction));
    ob_set_n(returnValue,
             L"alternateSelectedControlTextColor", getColorRGB([NSColor alternateSelectedControlTextColor], blend, fraction));
    ob_set_n(returnValue,
             L"scrubberTexturedBackgroundColor", getColorRGB([NSColor scrubberTexturedBackgroundColor], blend, fraction));
    ob_set_n(returnValue,
             L"placeholderTextColor", getColorRGB([NSColor placeholderTextColor], blend, fraction));
    ob_set_n(returnValue,
             L"linkColor", getColorRGB([NSColor linkColor], blend, fraction));
    
    if (@available(macOS 10.13, *)) {
        ob_set_n(returnValue,
                 L"findHighlightColor", getColorRGB([NSColor findHighlightColor], blend, fraction));
    }
    
    if (@available(macOS 10.14, *)) {
        ob_set_n(returnValue,
                 L"selectedContentBackgroundColor", getColorRGB([NSColor selectedContentBackgroundColor], blend, fraction));
        ob_set_n(returnValue,
                 L"separatorColor", getColorRGB([NSColor separatorColor], blend, fraction));
        ob_set_n(returnValue,
                 L"unemphasizedSelectedContentBackgroundColor", getColorRGB([NSColor unemphasizedSelectedContentBackgroundColor], blend, fraction));
        ob_set_n(returnValue,
                 L"unemphasizedSelectedTextColor", getColorRGB([NSColor unemphasizedSelectedTextColor], blend, fraction));
        ob_set_n(returnValue,
                 L"unemphasizedSelectedTextBackgroundColor", getColorRGB([NSColor unemphasizedSelectedTextBackgroundColor], blend, fraction));
    }

    PA_ReturnObject(params, returnValue);
}

